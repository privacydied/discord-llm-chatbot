"""
Context management commands for the enhanced contextual conversation manager.
"""

import discord
from discord.ext import commands

from bot.utils.logging import get_logger
from bot.contextual_brain import create_context_command_handler

logger = get_logger(__name__)


class ContextCommands(commands.Cog):
    """Commands for managing conversation context and privacy settings."""

    def __init__(self, bot):
        self.bot = bot
        self.context_handlers = create_context_command_handler(bot)
        logger.info("‚úî Context commands loaded")

    @commands.command(name="context_reset", aliases=["reset_context", "clear_context"])
    async def context_reset(self, ctx):
        """Reset the conversation context for this channel/DM."""
        try:
            response = await self.context_handlers["context_reset"](ctx.message)
            await ctx.reply(response, mention_author=False)
            logger.info(
                f"‚úî Context reset requested by {ctx.author.id} in {ctx.channel.id}"
            )
        except Exception as e:
            logger.error(f"‚ùå Context reset failed: {e}")
            await ctx.reply("‚ùå Failed to reset context.", mention_author=False)

    @commands.command(name="context_stats", aliases=["ctx_stats"])
    async def context_stats(self, ctx):
        """Show context manager statistics."""
        try:
            response = await self.context_handlers["context_stats"](ctx.message)
            await ctx.reply(response, mention_author=False)
            logger.info(f"‚úî Context stats requested by {ctx.author.id}")
        except Exception as e:
            logger.error(f"‚ùå Context stats failed: {e}")
            await ctx.reply("‚ùå Failed to get context stats.", mention_author=False)

    @commands.command(name="privacy_optout", aliases=["opt_out", "no_context"])
    async def privacy_optout(self, ctx):
        """Opt out of conversation context tracking."""
        try:
            response = await self.context_handlers["privacy_optout"](ctx.message)
            await ctx.reply(response, mention_author=False)
            logger.info(f"‚úî Privacy opt-out by {ctx.author.id}")
        except Exception as e:
            logger.error(f"‚ùå Privacy opt-out failed: {e}")
            await ctx.reply(
                "‚ùå Failed to process privacy opt-out.", mention_author=False
            )

    @commands.command(name="privacy_optin", aliases=["opt_in", "enable_context"])
    async def privacy_optin(self, ctx):
        """Opt back into conversation context tracking."""
        try:
            response = await self.context_handlers["privacy_optin"](ctx.message)
            await ctx.reply(response, mention_author=False)
            logger.info(f"‚úî Privacy opt-in by {ctx.author.id}")
        except Exception as e:
            logger.error(f"‚ùå Privacy opt-in failed: {e}")
            await ctx.reply(
                "‚ùå Failed to process privacy opt-in.", mention_author=False
            )

    @commands.command(name="context_help", aliases=["ctx_help"])
    async def context_help(self, ctx):
        """Show help for context management commands."""
        help_text = """
**üß† Enhanced Context Management Commands**

**Context Control:**
‚Ä¢ `!context_reset` - Reset conversation history for this channel/DM
‚Ä¢ `!context_stats` - Show context manager statistics

**Privacy Controls:**
‚Ä¢ `!privacy_optout` - Opt out of conversation context tracking
‚Ä¢ `!privacy_optin` - Opt back into conversation context tracking

**Features:**
‚úî **Multi-user conversations** - Tracks context across users in shared channels
‚úî **Privacy-first** - DMs are never saved to disk, opt-out available
‚úî **Encrypted storage** - All content encrypted at rest
‚úî **Smart context** - Includes relevant conversation history in responses
‚úî **Configurable** - History window controlled by `HISTORY_WINDOW` env var

**Environment Variables:**
‚Ä¢ `HISTORY_WINDOW` - Max messages per user/channel (default: 10)
‚Ä¢ `USE_ENHANCED_CONTEXT` - Enable enhanced context (default: true)
‚Ä¢ `IN_MEMORY_CONTEXT_ONLY` - Keep context in memory only (default: false)
        """

        embed = discord.Embed(
            title="üß† Enhanced Context Management",
            description=help_text.strip(),
            color=0x00FF00,
        )

        await ctx.reply(embed=embed, mention_author=False)


async def setup(bot):
    """Set up context commands."""
    await bot.add_cog(ContextCommands(bot))
    logger.info("‚úî Context commands cog loaded")
