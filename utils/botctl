#!/usr/bin/env bash
set -Eeuo pipefail

cd /volume1/py/discord-llm-chatbot

PIDFILE="bot.pid"
LOGFILE="bot.log"

is_running() {
  [[ -f "$PIDFILE" ]] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null
}

start() {
  if is_running; then
    echo "Already running as PID $(cat "$PIDFILE")"
    exit 0
  fi

  # If you actually want your venv instead of uv’s resolver, uncomment:
  # LAUNCH='source .venv/bin/activate; exec python -m bot.main'
  LAUNCH='exec uv run python -m bot.main'

  # Detach, ignore HUP, and ensure $! is the final process where possible
  nohup bash -lc "$LAUNCH" >> "$LOGFILE" 2>&1 &
  P=$!

  # Resolve child if uv spawned one
  sleep 1
  CHILD="$(ps -o pid= --ppid "$P" | awk 'NR==1{print $1}')"
  echo "${CHILD:-$P}" > "$PIDFILE"

  disown || true
  echo "Started: PID $(cat "$PIDFILE") (log: $LOGFILE)"
}

stop() {
  if ! is_running; then
    echo "Not running."
    rm -f "$PIDFILE"
    exit 0
  fi

  PID="$(cat "$PIDFILE")"
  echo "Stopping PID $PID …"
  kill "$PID" 2>/dev/null || true

  # wait up to ~4s for graceful shutdown
  for i in {1..20}; do
    kill -0 "$PID" 2>/dev/null || { rm -f "$PIDFILE"; echo "Stopped."; return; }
    sleep 0.2
  done

  echo "Still alive, sending SIGKILL."
  kill -9 "$PID" 2>/dev/null || true
  rm -f "$PIDFILE"
  echo "Stopped."
}

status() {
  if is_running; then
    echo "Running (PID $(cat "$PIDFILE"))."
  else
    echo "Stopped."
  fi
}

case "${1:-}" in
  start)   start ;;
  stop)    stop ;;
  restart) stop; start ;;
  status)  status ;;
  *) echo "Usage: $0 {start|stop|restart|status}"; exit 1 ;;
esac

